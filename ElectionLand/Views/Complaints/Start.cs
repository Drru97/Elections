#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ElectionLand.Views.Complaints
{
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;


[System.CodeDom.Compiler.GeneratedCodeAttribute("RazorTemplatePreprocessor", "2.6.0.0")]
public partial class Start : StartBase
{

#line hidden

public override void Execute()
{

#line 1 "Start.cshtml"
  
    ViewData["Title"] = "Home";


#line default
#line hidden
WriteLiteral("\r\n\r\n<!DOCTYPE html>\r\n\r\n<html>\r\n<head>\r\n    <title></title>\r\n\r\n    <script");

WriteLiteral(" src=\"//maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js\"");

WriteLiteral("></script>\r\n    <script");

WriteLiteral(" src=\"//cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js\"");

WriteLiteral("></script>\r\n    <!------ Include the above in your HEAD tag ---------->\r\n\r\n</head" +
">\r\n<body>\r\n\r\n\r\n    <main>\r\n\r\n        <div");

WriteLiteral(" class=\"container\"");

WriteLiteral(">\r\n            <img");

WriteLiteral(" class=\"img\"");

WriteLiteral(" src=\"images/sky.jpg\"");

WriteLiteral(">\r\n            <div");

WriteLiteral(" class=\"center\"");

WriteLiteral("> Обери майбутнє України Твій голос вирішує!</div>\r\n        </div>\r\n\r\n\r\n        <" +
"!-- features section -->\r\n        <div");

WriteLiteral(" class=\"site-section\"");

WriteLiteral(">\r\n            <div");

WriteLiteral(" class=\"site-section-inside\"");

WriteLiteral(">\r\n\r\n                <div");

WriteLiteral(" class=\"section-header\"");

WriteLiteral(">\r\n                    <h2>Свідомий вибір запорука:</h2>\r\n                </div>\r" +
"\n\r\n                <div");

WriteLiteral(" class=\"feature-box\"");

WriteLiteral(">\r\n                    <img");

WriteLiteral(" src=\"images/like.png\"");

WriteLiteral(" alt=\"Easy to Use\"");

WriteLiteral(">\r\n                    <h5>Процвітаючого майбутнбого для нащадків</h5>\r\n         " +
"       </div>\r\n\r\n                <div");

WriteLiteral(" class=\"feature-box\"");

WriteLiteral(">\r\n                    <img");

WriteLiteral(" src=\"images/faces.png\"");

WriteLiteral(" alt=\"Fun to Use\"");

WriteLiteral(">\r\n                    <h5>Європейський напрям розвитку всієї України. Від Заходу" +
" до Сходу!</h5>\r\n                </div>\r\n\r\n                <div");

WriteLiteral(" class=\"feature-box\"");

WriteLiteral(">\r\n                    <img");

WriteLiteral(" src=\"images/heart.png\"");

WriteLiteral(" alt=\"Fun to Use\"");

WriteLiteral(">\r\n                    <h5>Українські цінності понад усе!</h5>\r\n                <" +
"/div>\r\n\r\n            </div>\r\n        </div>\r\n\r\n        <!-- testimonials section" +
" -->\r\n        <div");

WriteLiteral(" class=\"site-section site-section-secondary\"");

WriteLiteral(">\r\n            <div");

WriteLiteral(" class=\"site-section-inside\"");

WriteLiteral(">\r\n\r\n                <div");

WriteLiteral(" class=\"section-header\"");

WriteLiteral(">\r\n                    <h2>Що говорять про вибори України:</h2>\r\n                " +
"</div>\r\n\r\n                <div");

WriteLiteral(" class=\"testimonial-box\"");

WriteLiteral(">\r\n                    <div");

WriteLiteral(" class=\"testimonial-content\"");

WriteLiteral(">\r\n                        Українці домоглися свого їхні, голоси почуті!\r\n       " +
"             </div>\r\n                    <div");

WriteLiteral(" class=\"testimonial-author\"");

WriteLiteral(">\r\n                        <img");

WriteLiteral(" src=\"images/david.jpg\"");

WriteLiteral(" alt=\"David East\"");

WriteLiteral(">\r\n                        <h5>Барак Обама</h5>\r\n                        <span>44" +
" президент США</span>\r\n                    </div>\r\n                </div>\r\n\r\n   " +
"             <div");

WriteLiteral(" class=\"testimonial-box\"");

WriteLiteral(">\r\n                    <div");

WriteLiteral(" class=\"testimonial-content\"");

WriteLiteral(">\r\n                        Українці дали рішучий сигнал підтримки реформам!\r\n    " +
"                </div>\r\n                    <div");

WriteLiteral(" class=\"testimonial-author\"");

WriteLiteral(">\r\n                        <img");

WriteLiteral(" src=\"img/holly.jpg\"");

WriteLiteral(" alt=\"Holly Lloyd\"");

WriteLiteral(">\r\n                        <h5>Вільям Хейг</h5>\r\n                        <span>Мі" +
"ністр закордонних справ Великобританії</span>\r\n                    </div>\r\n     " +
"           </div>\r\n\r\n                <div");

WriteLiteral(" class=\"testimonial-box\"");

WriteLiteral(">\r\n                    <div");

WriteLiteral(" class=\"testimonial-content\"");

WriteLiteral(">\r\n                        Вибори в Україні відбулися згідно з міжнародними станд" +
"артами.\r\n                    </div>\r\n                    <div");

WriteLiteral(" class=\"testimonial-author\"");

WriteLiteral(">\r\n                        <img");

WriteLiteral(" src=\"images/brad.jpg\"");

WriteLiteral(" alt=\"Brad Green\"");

WriteLiteral(@">
                        <h5>Жоао Соарес</h5>
                        <span>Координатор ОБСЄ зі спостереженням за виборами</span>
                    </div>
                </div>

            </div>
        </div>

    </main>

</body>
</html>



");

}
}

// NOTE: this is the default generated helper class. You may choose to extract it to a separate file 
// in order to customize it or share it between multiple templates, and specify the template's base 
// class via the @inherits directive.
public abstract class StartBase
{

		// This field is OPTIONAL, but used by the default implementation of Generate, Write, WriteAttribute and WriteLiteral
		//
		System.IO.TextWriter __razor_writer;

		// This method is OPTIONAL
		//
		/// <summary>Executes the template and returns the output as a string.</summary>
		/// <returns>The template output.</returns>
		public string GenerateString ()
		{
			using (var sw = new System.IO.StringWriter ()) {
				Generate (sw);
				return sw.ToString ();
			}
		}

		// This method is OPTIONAL, you may choose to implement Write and WriteLiteral without use of __razor_writer
		// and provide another means of invoking Execute.
		//
		/// <summary>Executes the template, writing to the provided text writer.</summary>
		/// <param name="writer">The TextWriter to which to write the template output.</param>
		public void Generate (System.IO.TextWriter writer)
		{
			__razor_writer = writer;
			Execute ();
			__razor_writer = null;
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the template output without HTML escaping it.</summary>
		/// <param name="value">The literal value.</param>
		protected void WriteLiteral (string value)
		{
			__razor_writer.Write (value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the TextWriter without HTML escaping it.</summary>
		/// <param name="writer">The TextWriter to which to write the literal.</param>
		/// <param name="value">The literal value.</param>
		protected static void WriteLiteralTo (System.IO.TextWriter writer, string value)
		{
			writer.Write (value);
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a value to the template output, HTML escaping it if necessary.</summary>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected void Write (object value)
		{
			WriteTo (__razor_writer, value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes an object value to the TextWriter, HTML escaping it if necessary.</summary>
		/// <param name="writer">The TextWriter to which to write the value.</param>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected static void WriteTo (System.IO.TextWriter writer, object value)
		{
			if (value == null)
				return;

			var write = value as Action<System.IO.TextWriter>;
			if (write != null) {
				write (writer);
				return;
			}

			//NOTE: a more sophisticated implementation would write safe and pre-escaped values directly to the
			//instead of double-escaping. See System.Web.IHtmlString in ASP.NET 4.0 for an example of this.
			writer.Write(System.Net.WebUtility.HtmlEncode (value.ToString ()));
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to the template output.
		/// </summary>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		protected void WriteAttribute (string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			WriteAttributeTo (__razor_writer, name, prefix, suffix, values);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to a TextWriter.
		/// </summary>
		/// <param name="writer">The TextWriter to which to write the attribute.</param>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		///<remarks>Used by Razor helpers to write attributes.</remarks>
		protected static void WriteAttributeTo (System.IO.TextWriter writer, string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			// this is based on System.Web.WebPages.WebPageExecutingBase
			// Copyright (c) Microsoft Open Technologies, Inc.
			// Licensed under the Apache License, Version 2.0
			if (values.Length == 0) {
				// Explicitly empty attribute, so write the prefix and suffix
				writer.Write (prefix);
				writer.Write (suffix);
				return;
			}

			bool first = true;
			bool wroteSomething = false;

			for (int i = 0; i < values.Length; i++) {
				Tuple<string,object,bool> attrVal = values [i];
				string attPrefix = attrVal.Item1;
				object value = attrVal.Item2;
				bool isLiteral = attrVal.Item3;

				if (value == null) {
					// Nothing to write
					continue;
				}

				// The special cases here are that the value we're writing might already be a string, or that the 
				// value might be a bool. If the value is the bool 'true' we want to write the attribute name instead
				// of the string 'true'. If the value is the bool 'false' we don't want to write anything.
				//
				// Otherwise the value is another object (perhaps an IHtmlString), and we'll ask it to format itself.
				string stringValue;
				bool? boolValue = value as bool?;
				if (boolValue == true) {
					stringValue = name;
				} else if (boolValue == false) {
					continue;
				} else {
					stringValue = value as string;
				}

				if (first) {
					writer.Write (prefix);
					first = false;
				} else {
					writer.Write (attPrefix);
				}

				if (isLiteral) {
					writer.Write (stringValue ?? value);
				} else {
					WriteTo (writer, stringValue ?? value);
				}
				wroteSomething = true;
			}
			if (wroteSomething) {
				writer.Write (suffix);
			}
		}
		// This method is REQUIRED. The generated Razor subclass will override it with the generated code.
		//
		///<summary>Executes the template, writing output to the Write and WriteLiteral methods.</summary>.
		///<remarks>Not intended to be called directly. Call the Generate method instead.</remarks>
		public abstract void Execute ();

}
}
#pragma warning restore 1591
